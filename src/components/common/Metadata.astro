---
// src/components/Metadata.astro
import { AstroSeo, type Props as AstroSeoProps, type OpenGraph as AstroSeoOpenGraphProps, type Twitter as AstroSeoTwitterProps } from '@astrolib/seo';
import merge from 'lodash.merge';

import { SITE, METADATA as GLOBAL_METADATA_CONFIG } from '~/utils/config';
import type { MetaData as PageMetaData, MetaDataImage, AlternateLinkInfo } from '~/types';
import { getAsset, getCanonical, getPermalink } from '~/utils/permalinks';
import { adaptOpenGraphImages } from '~/utils/images';
import { getTranslator, defaultLang, supportedLangs, getTranslationsForLocale, prefixDefaultLocale } from '~/i18n';
import { getPageKeyForPath, getAlternateLinksForPage } from '~/utils/hreflang-mapping';

export interface Props {
  metadata?: PageMetaData;
  frontmatter?: Record<string, any> & Partial<PageMetaData>;
  lang?: string;
}

const { metadata: metadataFromProps = {}, frontmatter = {}, lang: forcedLang } = Astro.props;
const pageData: PageMetaData = merge({}, frontmatter, metadataFromProps);

const currentLocale = (forcedLang && supportedLangs.includes(forcedLang))
  ? forcedLang
  : (Astro.currentLocale && supportedLangs.includes(Astro.currentLocale) ? Astro.currentLocale : defaultLang);

console.log(`[Metadata.astro] 游꿢 Final Locale: ${currentLocale}`);

const translations = getTranslationsForLocale(currentLocale);
const t = getTranslator(translations || {}, currentLocale);
const LANG_TO_HREFLANG_MAP: Record<string, string> = { en: 'en-US', es: 'es-ES', nl: 'nl-NL', fr: 'fr-FR', de: 'de-DE' };

const siteNameTranslated = t('site.name', {}, { defaultValue: SITE.name });

// T칤tulo
let resolvedPageTitle: string | undefined;
if (typeof pageData.title === 'function') { resolvedPageTitle = pageData.title(t); } 
else { resolvedPageTitle = pageData.title; }
const titleFromGlobalConfig = typeof GLOBAL_METADATA_CONFIG.title?.default === 'function' ? GLOBAL_METADATA_CONFIG.title.default(t) : GLOBAL_METADATA_CONFIG.title?.default;
const finalTitle: string = resolvedPageTitle || titleFromGlobalConfig || siteNameTranslated;
const finalTitleTemplate: string = pageData.ignoreTitleTemplate ? '%s' : (GLOBAL_METADATA_CONFIG.title?.template || '%s');

// Descripci칩n
let resolvedPageDescription: string | undefined;
if (typeof pageData.description === 'function') { resolvedPageDescription = pageData.description(t); } 
else { resolvedPageDescription = pageData.description; }
const globalDescription = typeof GLOBAL_METADATA_CONFIG.description === 'function' ? GLOBAL_METADATA_CONFIG.description(t) : GLOBAL_METADATA_CONFIG.description;
const finalDescription: string = resolvedPageDescription || globalDescription || '';

// Can칩nica
const permalink = getPermalink(Astro.url.pathname);
const finalCanonical: string = pageData.canonical?.toString() || getCanonical(permalink);

// Robots
const finalRobots = { ...GLOBAL_METADATA_CONFIG.robots, ...pageData.robots };
const seoNoIndex: boolean = finalRobots.noindex ?? !(finalRobots.index ?? true);
const seoNoFollow: boolean = finalRobots.nofollow ?? !(finalRobots.follow ?? true);

// Hreflang (L칩gica 100% Autom치tica)
const pageKey = getPageKeyForPath(Astro.url.pathname, currentLocale);
const finalAlternateLinks = pageKey ? getAlternateLinksForPage(pageKey) : [];

if (!pageKey && !Astro.url.pathname.endsWith('/404/')) {
  console.warn(`[HREFLANG] No page key found for ${Astro.url.pathname}. No hreflang tags will be generated for this page.`);
}

// OpenGraph
const globalOg = GLOBAL_METADATA_CONFIG.openGraph || {};
const pageOg = pageData.openGraph || {};
const finalOpenGraphBase: Partial<AstroSeoOpenGraphProps> = {
    url: finalCanonical,
    site_name: siteNameTranslated,
    locale: LANG_TO_HREFLANG_MAP[currentLocale] || currentLocale,
    type: pageData.type || pageOg.type || globalOg.type || 'website',
};
let imagesSource = pageData.ogImage || pageOg.images || globalOg.images;
if (imagesSource && !Array.isArray(imagesSource)) { imagesSource = [imagesSource]; }
let ogImages: AstroSeoOpenGraphProps['images'] = [];
const siteUrl = SITE.site ? new URL(SITE.site) : undefined;
if (siteUrl && imagesSource && imagesSource.length > 0) {
    ogImages = (imagesSource as any[]).map(imgInput => {
        let urlStr: string = '';
        let altText: string | undefined;
        if (typeof imgInput === 'string') { urlStr = imgInput; } 
        else if (imgInput instanceof URL) { urlStr = imgInput.href; } 
        else if (imgInput && typeof imgInput === 'object' && 'url' in imgInput) {
            const mdImg = imgInput as MetaDataImage;
            const urlInput = mdImg.url;
            urlStr = typeof urlInput === 'string' ? urlInput : urlInput.href;
            altText = mdImg.alt;
        }
        if (!urlStr || urlStr.trim() === '') return null;
        const finalImgUrl = urlStr.startsWith('http') ? urlStr : siteUrl ? new URL(getAsset(urlStr), siteUrl).href : '';
        if (!finalImgUrl) return null;
        return { url: finalImgUrl, alt: altText || finalDescription };
    }).filter(Boolean) as AstroSeoOpenGraphProps['images'];
}
const finalOpenGraph: AstroSeoOpenGraphProps = merge({}, globalOg, pageOg, finalOpenGraphBase, {
  title: finalTitle,
  description: finalDescription,
  ...(ogImages && ogImages.length > 0 && { images: ogImages }),
});
if (finalOpenGraph.article && Object.keys(finalOpenGraph.article).length === 0) { delete finalOpenGraph.article; }
const adaptedOpenGraph = finalOpenGraph && Object.keys(finalOpenGraph).length > 0 && siteUrl ? await adaptOpenGraphImages(finalOpenGraph, siteUrl) : undefined;

// Twitter
const globalTw = GLOBAL_METADATA_CONFIG.twitter || {};
const pageTw = pageData.twitter || {};
let twitterImageResolved = pageTw.image || globalTw.image;
if (siteUrl && twitterImageResolved && !twitterImageResolved.startsWith('http')) { 
    try { twitterImageResolved = new URL(getAsset(twitterImageResolved), siteUrl).href; } 
    catch (e) { twitterImageResolved = ''; }
} else if (!twitterImageResolved && finalOpenGraph?.images?.[0]?.url) {
    twitterImageResolved = finalOpenGraph.images[0].url;
}
const twitterImageAltResolved = pageTw.imageAlt || globalTw.imageAlt || finalOpenGraph?.images?.[0]?.alt || finalDescription;

const finalTwitter: AstroSeoTwitterProps = {
    handle: pageTw.handle || globalTw.handle,
    site: pageTw.site || globalTw.site,
    cardType: pageTw.cardType || globalTw.cardType || (twitterImageResolved ? 'summary_large_image' : 'summary'),
    ...(twitterImageResolved && { image: twitterImageResolved }),
    ...(twitterImageAltResolved && { imageAlt: twitterImageAltResolved }),
};

// Props finales para AstroSeo
const astroSeoProps: AstroSeoProps = {
  title: finalTitle,
  titleTemplate: finalTitleTemplate,
  description: finalDescription,
  canonical: finalCanonical,
  noindex: seoNoIndex,
  nofollow: seoNoFollow,
  openGraph: adaptedOpenGraph,
  twitter: finalTwitter,
  languageAlternates: finalAlternateLinks.length > 0 ? finalAlternateLinks : undefined,
};
---

<AstroSeo {...astroSeoProps} />