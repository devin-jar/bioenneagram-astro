---
// src/pages/en/building.astro
import Layout from '~/layouts/Layout.astro'; // Layout base
import { getHomePermalink } from '~/utils/permalinks';

import { getTranslator, defaultLang, supportedLangs } from '~/i18n'; // defaultLang ser√° 'es'
import { getPageKeyForPath, getAlternateLinksForPage as getAlternateLinks } from '~/utils/hreflang-mapping';
import type { MetaData, HeroProps, CallToActionProps, NoteProps, FeaturesProps, ContentProps, PricingProps, TestimonialsProps, FaqsProps, StepsProps } from '~/types';

interface JsonModule { default?: Record<string, any>; [key: string]: any; }

// Para la p√°gina de inicio en el idioma por defecto ('es'), Astro.currentLocale ser√° 'es'
// o undefined si la URL es solo '/'. Usamos defaultLang ('es') como base.
const currentLocale = Astro.currentLocale && supportedLangs.includes(Astro.currentLocale)
  ? Astro.currentLocale
  : defaultLang; // 'es'

// Carga de Traducciones
const translationModules = import.meta.glob('~/i18n/locales/**/translation.json', { eager: true }) as Record<string, JsonModule | undefined>;
let pageTranslations: Record<string, any> | undefined;
const expectedModulePath = `/src/i18n/locales/${currentLocale}/translation.json`; // Ser√° /src/i18n/locales/es/translation.json
const moduleCandidate = translationModules[expectedModulePath];

if (moduleCandidate) {
  pageTranslations = moduleCandidate.default || moduleCandidate;
} else {
  console.error(`[Page: ${Astro.url.pathname}] CRITICAL: Translation file for locale "${currentLocale}" not found at ${expectedModulePath}. Using empty object.`);
  pageTranslations = {};
}

const t = getTranslator(pageTranslations || {}, currentLocale);

// --- METADATA ---
// Im√°genes espec√≠ficas para OG/Twitter de esta p√°gina (si las tienes)
// const ogImageHomeEs = '/images/og-image-home-es.jpg'; // Ejemplo

const baseMetadata: MetaData = {
  title: t('homepage.meta.title'),
  description: t('homepage.meta.description'),
  robots: { noindex: true, follow: false },
  canonical: Astro.url.href, // URL actual de esta p√°gina
  type: 'website',
  // ogImage: { url: ogImageHomeEs, alt: t('homepage.hero.imageAlt') }, // Si tienes una espec√≠fica
  openGraph: {
    title: t('homepage.meta.title'),
    description: t('homepage.meta.description'),
    // images: [{ url: new URL(ogImageHomeEs, Astro.site).href, alt: t('homepage.hero.imageAlt') }],
    type: 'website',
    locale: 'de_DE', // Espec√≠fico para la p√°gina en espa√±ol
  },
  twitter: {
    cardType: 'summary_large_image',
    title: t('homepage.meta.title'),
    description: t('homepage.meta.description'),
    // image: new URL(ogImageHomeEs, Astro.site).href,
    imageAlt: t('homepage.hero.imageAlt'), // Usar el alt del hero o uno m√°s espec√≠fico
  }
};

const pageKey = getPageKeyForPath(Astro.url.pathname, currentLocale);
const alternateLinksArray = pageKey ? getAlternateLinks(pageKey, currentLocale) : []; // Usar la funci√≥n correcta

console.log(`[${Astro.url.pathname}] Page Key:`, pageKey);
console.log(`[${Astro.url.pathname}] Alternate Links Array:`, JSON.stringify(alternateLinksArray, null, 2));

const metadata: MetaData = {
  ...baseMetadata,
  ...(alternateLinksArray && alternateLinksArray.length > 0 ? { alternateLinks: alternateLinksArray } : {}),
};


// Similar a 404, el currentLocale puede ser ambiguo si se accede directamente a /building
const currentLocaleForBuilding = Astro.currentLocale || defaultLang;
const homeLink = getHomePermalink(currentLocaleForBuilding);
---

<Layout metadata={metadata}>
  <section class="flex items-center h-full p-16">
    <div class="container flex flex-col items-center justify-center px-5 mx-auto my-8">
      <div class="max-w-md text-center">
        <h2 class="mb-8 font-bold text-4xl sm:text-5xl md:text-6xl">
          <span class="sr-only">{t('buildingPage.statusText')}</span>
          <span class="text-primary">{t('buildingPage.mainText')}</span>
          <span>üë®‚Äçüíª</span>
        </h2>
        <p class="text-3xl font-semibold md:text-3xl">{t('buildingPage.sorryText')}</p>
        <p class="mt-4 mb-8 text-lg text-muted dark:text-slate-400">
          {t('buildingPage.infoText')}
        </p>
        <a rel="noopener noreferrer" href={homeLink} class="btn ml-4">{t('buildingPage.buttonText')}</a>
      </div>
    </div>
  </section>
</Layout>